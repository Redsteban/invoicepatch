import { NextRequest, NextResponse } from 'next/server';
import nodemailer from 'nodemailer';
import jsPDF from 'jspdf';

export async function POST(request: NextRequest) {
  try {
    const data = await request.json();
    
    // Check if this is demo mode (no SMTP configured)
    const isDemoMode = !process.env.SMTP_USER || !process.env.SMTP_PASS;
    
    if (isDemoMode) {
      // In demo mode, just return success without actually sending
      return NextResponse.json({ 
        success: true, 
        message: 'Demo mode: Invoice would be sent successfully! Set up SMTP_USER and SMTP_PASS environment variables to enable real email sending.',
        demo: true
      });
    }
    
    // Generate PDF buffer for attachment
    const pdf = new jsPDF();
    pdf.setFont('helvetica');
    
    // Header
    pdf.setFontSize(24);
    pdf.setTextColor(59, 130, 246);
    pdf.text('INVOICE', 20, 30);
    
    // Company Info (Right side)
    pdf.setFontSize(12);
    pdf.setTextColor(0, 0, 0);
    const rightX = 120;
    let currentY = 30;
    
    pdf.setFontSize(14);
    pdf.text(data.contractorName, rightX, currentY);
    currentY += 8;
    
    pdf.setFontSize(10);
    pdf.text(data.contractorAddress, rightX, currentY);
    currentY += 6;
    pdf.text(`${data.contractorCity}, ${data.contractorProvince} ${data.contractorPostal}`, rightX, currentY);
    currentY += 6;
    pdf.text(data.contractorPhone, rightX, currentY);
    currentY += 6;
    pdf.text(data.contractorEmail, rightX, currentY);
    currentY += 8;
    
    if (data.gstNumber) {
      pdf.text(`GST/HST: ${data.gstNumber}`, rightX, currentY);
      currentY += 6;
    }
    
    // Invoice Details
    currentY = 50;
    pdf.setFontSize(12);
    pdf.text(`Invoice #: ${data.invoiceNumber}`, 20, currentY);
    currentY += 8;
    pdf.text(`Date: ${new Date(data.invoiceDate).toLocaleDateString()}`, 20, currentY);
    currentY += 8;
    pdf.text(`Due Date: ${new Date(data.dueDate).toLocaleDateString()}`, 20, currentY);
    currentY += 15;
    
    // Bill To
    pdf.setFontSize(14);
    pdf.text('Bill To:', 20, currentY);
    currentY += 8;
    
    pdf.setFontSize(12);
    pdf.text(data.clientName, 20, currentY);
    currentY += 6;
    pdf.text(data.clientAddress, 20, currentY);
    currentY += 6;
    pdf.text(`${data.clientCity}, ${data.clientProvince} ${data.clientPostal}`, 20, currentY);
    currentY += 6;
    pdf.text(data.clientEmail, 20, currentY);
    currentY += 15;
    
    if (data.projectDescription) {
      pdf.text(`Project: ${data.projectDescription}`, 20, currentY);
      currentY += 15;
    }
    
    // Table Header
    const tableY = currentY;
    pdf.setFillColor(248, 250, 252);
    pdf.rect(20, tableY, 170, 10, 'F');
    
    pdf.setFontSize(10);
    pdf.setTextColor(51, 65, 85);
    pdf.text('Description', 25, tableY + 7);
    pdf.text('Qty', 120, tableY + 7);
    pdf.text('Rate', 140, tableY + 7);
    pdf.text('Amount', 165, tableY + 7);
    
    currentY = tableY + 15;
    
    // Line Items
    pdf.setTextColor(0, 0, 0);
    data.lineItems.forEach((item: any) => {
      pdf.text(item.description.substring(0, 40), 25, currentY);
      pdf.text(item.quantity.toString(), 120, currentY);
      pdf.text(`$${item.rate.toFixed(2)}`, 140, currentY);
      pdf.text(`$${item.amount.toFixed(2)}`, 165, currentY);
      currentY += 8;
    });
    
    // Totals
    currentY += 10;
    const totalsX = 130;
    
    pdf.text('Subtotal:', totalsX, currentY);
    pdf.text(`$${data.subtotal.toFixed(2)}`, 170, currentY);
    currentY += 8;
    
    if (data.taxRate && data.taxAmount > 0) {
      pdf.text(`${data.taxRate.name} (${(data.taxRate.total * 100).toFixed(1)}%):`, totalsX, currentY);
      pdf.text(`$${data.taxAmount.toFixed(2)}`, 170, currentY);
      currentY += 8;
    }
    
    pdf.setFontSize(12);
    pdf.setTextColor(59, 130, 246);
    pdf.text('Total:', totalsX, currentY);
    pdf.text(`$${data.total.toFixed(2)}`, 170, currentY);
    
    if (data.notes) {
      currentY += 20;
      pdf.setFontSize(10);
      pdf.setTextColor(0, 0, 0);
      pdf.text('Notes:', 20, currentY);
      currentY += 8;
      const noteLines = pdf.splitTextToSize(data.notes, 170);
      pdf.text(noteLines, 20, currentY);
    }
    
    const pageHeight = pdf.internal.pageSize.height;
    pdf.setFontSize(8);
    pdf.setTextColor(100, 100, 100);
    pdf.text('Generated by InvoicePatch - Professional Canadian Invoice Generator', 20, pageHeight - 20);
    
    const pdfBuffer = Buffer.from(pdf.output('arraybuffer'));
    
    // Create email transporter
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });
    
    // Email content
    const emailHtml = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); color: white; padding: 30px; text-align: center;">
          <h1 style="margin: 0; font-size: 28px;">Invoice from ${data.contractorName}</h1>
          <p style="margin: 10px 0 0 0; opacity: 0.9;">Professional Invoice - Invoice #${data.invoiceNumber}</p>
        </div>
        
        <div style="padding: 30px; background: #ffffff;">
          <h2 style="color: #334155; margin-bottom: 20px;">Invoice Details</h2>
          
          <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
              <strong>Invoice Number:</strong>
              <span>${data.invoiceNumber}</span>
            </div>
            <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
              <strong>Date:</strong>
              <span>${new Date(data.invoiceDate).toLocaleDateString()}</span>
            </div>
            <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
              <strong>Due Date:</strong>
              <span>${new Date(data.dueDate).toLocaleDateString()}</span>
            </div>
            <div style="display: flex; justify-content: space-between; font-size: 18px; font-weight: bold; color: #3b82f6; border-top: 2px solid #e2e8f0; padding-top: 10px; margin-top: 15px;">
              <span>Total Amount:</span>
              <span>$${data.total.toFixed(2)} CAD</span>
            </div>
          </div>
          
          ${data.projectDescription ? `
            <div style="margin-bottom: 20px;">
              <strong>Project:</strong>
              <p style="margin: 5px 0 0 0; color: #64748b;">${data.projectDescription}</p>
            </div>
          ` : ''}
          
          <div style="background: #f1f5f9; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h3 style="margin-top: 0; color: #334155;">From:</h3>
            <p style="margin: 5px 0; color: #64748b;">
              ${data.contractorName}<br>
              ${data.contractorAddress}<br>
              ${data.contractorCity}, ${data.contractorProvince} ${data.contractorPostal}<br>
              ${data.contractorEmail}<br>
              ${data.contractorPhone}
              ${data.gstNumber ? `<br>GST/HST: ${data.gstNumber}` : ''}
            </p>
          </div>
          
          ${data.notes ? `
            <div style="margin-bottom: 20px;">
              <strong>Notes:</strong>
              <p style="margin: 5px 0 0 0; color: #64748b;">${data.notes}</p>
            </div>
          ` : ''}
          
          <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e2e8f0;">
            <p style="color: #64748b; margin: 0;">
              Please find the detailed invoice attached as a PDF.<br>
              Thank you for your business!
            </p>
          </div>
        </div>
        
        <div style="background: #f8fafc; padding: 20px; text-align: center; color: #64748b; font-size: 12px;">
          Generated by InvoicePatch - Professional Canadian Invoice Generator<br>
          CRA Compliant • Secure • Professional
        </div>
      </div>
    `;
    
    // Send email
    const mailOptions = {
      from: `"${data.contractorName}" <${process.env.SMTP_USER}>`,
      to: data.clientEmail,
      subject: `Invoice #${data.invoiceNumber} from ${data.contractorName}`,
      html: emailHtml,
      attachments: [
        {
          filename: `invoice-${data.invoiceNumber}.pdf`,
          content: pdfBuffer,
          contentType: 'application/pdf',
        },
      ],
    };
    
    await transporter.sendMail(mailOptions);
    
    return NextResponse.json({ 
      success: true, 
      message: 'Invoice sent successfully!' 
    });
    
  } catch (error) {
    console.error('Email sending error:', error);
    return NextResponse.json(
      { 
        error: 'Failed to send invoice', 
        details: error instanceof Error ? error.message : 'Unknown error' 
      },
      { status: 500 }
    );
  }
} 