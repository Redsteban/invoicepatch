import { NextRequest, NextResponse } from 'next/server';
import jsPDF from 'jspdf';

export async function POST(request: NextRequest) {
  try {
    const data = await request.json();
    
    // Create new PDF document
    const pdf = new jsPDF();
    
    // Set font
    pdf.setFont('helvetica');
    
    // Header
    pdf.setFontSize(24);
    pdf.setTextColor(59, 130, 246); // Blue color
    pdf.text('INVOICE', 20, 30);
    
    // Company Info (Right side)
    pdf.setFontSize(12);
    pdf.setTextColor(0, 0, 0);
    const rightX = 120;
    let currentY = 30;
    
    pdf.setFontSize(14);
    pdf.text(data.contractorName, rightX, currentY);
    currentY += 8;
    
    pdf.setFontSize(10);
    pdf.text(data.contractorAddress, rightX, currentY);
    currentY += 6;
    pdf.text(`${data.contractorCity}, ${data.contractorProvince} ${data.contractorPostal}`, rightX, currentY);
    currentY += 6;
    pdf.text(data.contractorPhone, rightX, currentY);
    currentY += 6;
    pdf.text(data.contractorEmail, rightX, currentY);
    currentY += 8;
    
    if (data.gstNumber) {
      pdf.text(`GST/HST: ${data.gstNumber}`, rightX, currentY);
      currentY += 6;
    }
    
    // Invoice Details
    currentY = 50;
    pdf.setFontSize(12);
    pdf.text(`Invoice #: ${data.invoiceNumber}`, 20, currentY);
    currentY += 8;
    pdf.text(`Date: ${new Date(data.invoiceDate).toLocaleDateString()}`, 20, currentY);
    currentY += 8;
    pdf.text(`Due Date: ${new Date(data.dueDate).toLocaleDateString()}`, 20, currentY);
    currentY += 15;
    
    // Bill To
    pdf.setFontSize(14);
    pdf.text('Bill To:', 20, currentY);
    currentY += 8;
    
    pdf.setFontSize(12);
    pdf.text(data.clientName, 20, currentY);
    currentY += 6;
    pdf.text(data.clientAddress, 20, currentY);
    currentY += 6;
    pdf.text(`${data.clientCity}, ${data.clientProvince} ${data.clientPostal}`, 20, currentY);
    currentY += 6;
    pdf.text(data.clientEmail, 20, currentY);
    currentY += 15;
    
    if (data.projectDescription) {
      pdf.text(`Project: ${data.projectDescription}`, 20, currentY);
      currentY += 15;
    }
    
    // Table Header
    const tableY = currentY;
    pdf.setFillColor(248, 250, 252); // Light gray background
    pdf.rect(20, tableY, 170, 10, 'F');
    
    pdf.setFontSize(10);
    pdf.setTextColor(51, 65, 85); // Slate color
    pdf.text('Description', 25, tableY + 7);
    pdf.text('Qty', 120, tableY + 7);
    pdf.text('Rate', 140, tableY + 7);
    pdf.text('Amount', 165, tableY + 7);
    
    currentY = tableY + 15;
    
    // Line Items
    pdf.setTextColor(0, 0, 0);
    data.lineItems.forEach((item: any) => {
      pdf.text(item.description.substring(0, 40), 25, currentY);
      pdf.text(item.quantity.toString(), 120, currentY);
      pdf.text(`$${item.rate.toFixed(2)}`, 140, currentY);
      pdf.text(`$${item.amount.toFixed(2)}`, 165, currentY);
      currentY += 8;
    });
    
    // Totals
    currentY += 10;
    const totalsX = 130;
    
    // Subtotal
    pdf.text('Subtotal:', totalsX, currentY);
    pdf.text(`$${data.subtotal.toFixed(2)}`, 170, currentY);
    currentY += 8;
    
    // Tax
    if (data.taxRate && data.taxAmount > 0) {
      pdf.text(`${data.taxRate.name} (${(data.taxRate.total * 100).toFixed(1)}%):`, totalsX, currentY);
      pdf.text(`$${data.taxAmount.toFixed(2)}`, 170, currentY);
      currentY += 8;
    }
    
    // Total
    pdf.setFontSize(12);
    pdf.setTextColor(59, 130, 246); // Blue color
    pdf.text('Total:', totalsX, currentY);
    pdf.text(`$${data.total.toFixed(2)}`, 170, currentY);
    
    // Notes
    if (data.notes) {
      currentY += 20;
      pdf.setFontSize(10);
      pdf.setTextColor(0, 0, 0);
      pdf.text('Notes:', 20, currentY);
      currentY += 8;
      
      // Split long notes into multiple lines
      const noteLines = pdf.splitTextToSize(data.notes, 170);
      pdf.text(noteLines, 20, currentY);
    }
    
    // Footer
    const pageHeight = pdf.internal.pageSize.height;
    pdf.setFontSize(8);
    pdf.setTextColor(100, 100, 100);
    pdf.text('Generated by InvoicePatch - Professional Canadian Invoice Generator', 20, pageHeight - 20);
    
    // Return PDF as buffer
    const pdfBuffer = pdf.output('arraybuffer');
    
    return new NextResponse(pdfBuffer, {
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="invoice-${data.invoiceNumber}.pdf"`,
      },
    });
  } catch (error) {
    console.error('PDF generation error:', error);
    return NextResponse.json(
      { error: 'Failed to generate PDF' },
      { status: 500 }
    );
  }
} 