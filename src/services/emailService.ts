import nodemailer from 'nodemailer';
import { z } from 'zod';
import { InvoiceData } from './pdfGenerator';

// --- Types ---
export interface EmailResult {
  success: boolean;
  message: string;
  info?: any;
  error?: any;
}

// --- Email Validation ---
export function validateEmailAddress(email: string): boolean {
  const emailSchema = z.string().email();
  return emailSchema.safeParse(email).success;
}

// --- SMTP Transport ---
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: Number(process.env.SMTP_PORT) || 465,
  secure: process.env.SMTP_SECURE === 'true',
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

// --- SMTP Config Check ---
function checkSmtpEnv(): string | null {
  const required = ['SMTP_HOST', 'SMTP_PORT', 'SMTP_USER', 'SMTP_PASS', 'FROM_EMAIL'];
  for (const key of required) {
    if (!process.env[key]) return key;
  }
  return null;
}

// --- HTML Email Templates ---
export function createEmailTemplate(type: 'invoice' | 'welcome', data: any): string {
  const brandColor = '#2241aa';
  const companyName = process.env.COMPANY_NAME || 'InvoicePatch';
  const fromEmail = process.env.FROM_EMAIL || 'noreply@invoicepatch.com';
  const unsubscribeUrl = '#'; // TODO: Implement real unsubscribe

  if (type === 'invoice') {
    const invoice: InvoiceData = data;
    return `
      <html>
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <style>
          body { font-family: 'Segoe UI', Arial, sans-serif; background: #f8fafc; margin: 0; padding: 0; }
          .container { max-width: 600px; margin: 0 auto; background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #0001; overflow: hidden; }
          .header { background: linear-gradient(90deg, ${brandColor} 60%, #3b82f6 100%); color: #fff; padding: 32px 24px 16px 24px; text-align: left; }
          .brand { font-size: 2rem; font-weight: bold; letter-spacing: 1px; }
          .summary { padding: 24px; }
          .cta { display: block; margin: 24px 0; text-align: center; }
          .cta-btn { background: ${brandColor}; color: #fff; padding: 12px 32px; border-radius: 6px; text-decoration: none; font-weight: 600; font-size: 1.1rem; }
          .footer { background: #f1f5f9; color: #64748b; font-size: 0.95rem; padding: 18px 24px; text-align: center; }
          .legal { font-size: 0.85rem; color: #94a3b8; margin-top: 12px; }
          @media (max-width: 600px) { .container { border-radius: 0; } .header, .summary, .footer { padding: 16px !important; } }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="brand">${companyName}</div>
            <div style="margin-top: 8px; font-size: 1.1rem;">Your Professional Invoice is Ready</div>
          </div>
          <div class="summary">
            <h2 style="color: ${brandColor}; margin-bottom: 8px;">Invoice #${invoice.invoiceNumber}</h2>
            <p><b>Period:</b> ${invoice.period.startDate.toLocaleDateString()} - ${invoice.period.endDate.toLocaleDateString()}</p>
            <p><b>Total:</b> $${invoice.summary.total.toFixed(2)}</p>
            <p><b>Issued:</b> ${invoice.issueDate.toLocaleDateString()}</p>
            <p><b>Due:</b> ${invoice.dueDate.toLocaleDateString()}</p>
            <div class="cta">
              <a class="cta-btn" href="#" target="_blank">Download PDF</a>
            </div>
            <p>Thank you for using <b>${companyName}</b>! If you have questions, reply to this email or contact us at <a href="mailto:${fromEmail}">${fromEmail}</a>.</p>
          </div>
          <div class="footer">
            <div>${companyName} | ${fromEmail}</div>
            <div class="legal">
              This invoice was generated by ${companyName}. For tax information, consult your local regulations.<br/>
              <a href="${unsubscribeUrl}" style="color: #64748b; text-decoration: underline;">Unsubscribe</a>
            </div>
          </div>
        </div>
      </body>
      </html>
    `;
  }
  // Welcome email
  const firstName = data?.firstName || '';
  return `
    <html>
    <head>
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <style>
        body { font-family: 'Segoe UI', Arial, sans-serif; background: #f8fafc; margin: 0; padding: 0; }
        .container { max-width: 600px; margin: 0 auto; background: #fff; border-radius: 12px; box-shadow: 0 2px 8px #0001; overflow: hidden; }
        .header { background: linear-gradient(90deg, ${brandColor} 60%, #3b82f6 100%); color: #fff; padding: 32px 24px 16px 24px; text-align: left; }
        .brand { font-size: 2rem; font-weight: bold; letter-spacing: 1px; }
        .body { padding: 24px; }
        .cta { display: block; margin: 24px 0; text-align: center; }
        .cta-btn { background: ${brandColor}; color: #fff; padding: 12px 32px; border-radius: 6px; text-decoration: none; font-weight: 600; font-size: 1.1rem; }
        .footer { background: #f1f5f9; color: #64748b; font-size: 0.95rem; padding: 18px 24px; text-align: center; }
        .legal { font-size: 0.85rem; color: #94a3b8; margin-top: 12px; }
        @media (max-width: 600px) { .container { border-radius: 0; } .header, .body, .footer { padding: 16px !important; } }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <div class="brand">${companyName}</div>
          <div style="margin-top: 8px; font-size: 1.1rem;">Welcome to InvoicePatch!</div>
        </div>
        <div class="body">
          <h2 style="color: ${brandColor}; margin-bottom: 8px;">Hi${firstName ? ` ${firstName}` : ''},</h2>
          <p>Thank you for signing up for <b>${companyName}</b>. We're excited to help you streamline your invoicing process.</p>
          <div class="cta">
            <a class="cta-btn" href="#" target="_blank">Get Started</a>
          </div>
          <p>If you have any questions, reply to this email or contact us at <a href="mailto:${fromEmail}">${fromEmail}</a>.</p>
        </div>
        <div class="footer">
          <div>${companyName} | ${fromEmail}</div>
          <div class="legal">
            You are receiving this email because you signed up for ${companyName}.<br/>
            <a href="${unsubscribeUrl}" style="color: #64748b; text-decoration: underline;">Unsubscribe</a>
          </div>
        </div>
      </div>
    </body>
    </html>
  `;
}

// --- Send Invoice Email ---
export async function sendInvoiceEmail(to: string, invoiceData: InvoiceData, pdfBase64: string): Promise<EmailResult> {
  if (!validateEmailAddress(to)) {
    return { success: false, message: 'Invalid email address' };
  }
  const missingEnv = checkSmtpEnv();
  if (missingEnv) {
    return { success: false, message: `Missing SMTP environment variable: ${missingEnv}` };
  }
  // Rate limiting stub (future):
  // TODO: Implement Redis or DB-based rate limiting for production

  try {
    const html = createEmailTemplate('invoice', invoiceData);
    const mailOptions = {
      from: process.env.FROM_EMAIL || 'noreply@invoicepatch.com',
      to,
      subject: `Your Invoice #${invoiceData.invoiceNumber} from InvoicePatch` ,
      html,
      attachments: [
        {
          filename: `Invoice-${invoiceData.invoiceNumber}.pdf`,
          content: Buffer.from(pdfBase64, 'base64'),
          contentType: 'application/pdf',
        },
      ],
    };
    const info = await transporter.sendMail(mailOptions);
    console.log('Email sent:', info.messageId);
    return { success: true, message: 'Email sent', info };
  } catch (error: any) {
    console.error('Email send error:', error);
    return { success: false, message: 'Failed to send email', error };
  }
}

// --- Send Welcome Email ---
export async function sendWelcomeEmail(to: string, firstName?: string): Promise<EmailResult> {
  if (!validateEmailAddress(to)) {
    return { success: false, message: 'Invalid email address' };
  }
  try {
    const html = createEmailTemplate('welcome', { firstName });
    const mailOptions = {
      from: process.env.FROM_EMAIL || 'noreply@invoicepatch.com',
      to,
      subject: 'Welcome to InvoicePatch!',
      html,
    };
    const info = await transporter.sendMail(mailOptions);
    console.log('Welcome email sent:', info.messageId);
    return { success: true, message: 'Welcome email sent', info };
  } catch (error: any) {
    console.error('Welcome email send error:', error);
    return { success: false, message: 'Failed to send welcome email', error };
  }
} 