import jsPDF from 'jspdf';

// --- Interfaces ---
export interface DailyEntry {
  date: Date;
  description: string;
  regularHours: number;
  overtimeHours: number;
  travelHours: number;
  amount: number;
  expenses?: number;
}

export interface InvoiceData {
  invoiceNumber: string;
  issueDate: Date;
  dueDate: Date;
  contractor: {
    name: string;
    address: string;
    email: string;
    phone?: string;
  };
  client: {
    name: string;
    address: string;
  };
  period: {
    startDate: Date;
    endDate: Date;
  };
  entries: DailyEntry[];
  summary: {
    regularHours: number;
    overtimeHours: number;
    travelHours: number;
    totalHours: number;
    regularAmount: number;
    overtimeAmount: number;
    travelAmount: number;
    expensesTotal: number;
    subtotal: number;
    gst: number;
    pst: number;
    total: number;
  };
  notes?: string;
}

// --- Tax Calculation ---
export function calculateTaxes(amount: number, province: string): { gst: number; pst: number; total: number } {
  // GST/PST rates by province (simplified)
  const rates: Record<string, { gst: number; pst: number }> = {
    AB: { gst: 0.05, pst: 0 },
    BC: { gst: 0.05, pst: 0.07 },
    MB: { gst: 0.05, pst: 0.07 },
    NB: { gst: 0.15, pst: 0 },
    NL: { gst: 0.15, pst: 0 },
    NS: { gst: 0.15, pst: 0 },
    NT: { gst: 0.05, pst: 0 },
    NU: { gst: 0.05, pst: 0 },
    ON: { gst: 0.13, pst: 0 },
    PE: { gst: 0.15, pst: 0 },
    QC: { gst: 0.05, pst: 0.09975 },
    SK: { gst: 0.05, pst: 0.06 },
    YT: { gst: 0.05, pst: 0 },
  };
  const { gst, pst } = rates[province] || { gst: 0.05, pst: 0 };
  return {
    gst: +(amount * gst).toFixed(2),
    pst: +(amount * pst).toFixed(2),
    total: +(amount * (1 + gst + pst)).toFixed(2),
  };
}

// --- PDF Generation ---
export async function generateInvoicePDF(data: InvoiceData): Promise<{ pdfBlob: Blob; pdfBase64: string }> {
  if (!data) throw new Error('No invoice data provided');
  const doc = new jsPDF({ unit: 'pt', format: 'a4' });
  const margin = 40;
  let y = margin;

  // --- Branding Header ---
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(22);
  doc.setTextColor(34, 65, 170);
  doc.text('InvoicePatch', margin, y);
  doc.setFontSize(10);
  doc.setTextColor(120, 120, 120);
  doc.text('Professional Invoice Service', margin, y + 18);
  // Watermark for free version
  doc.setFontSize(40);
  doc.setTextColor(200, 200, 200);
  doc.text('Generated by InvoicePatch', 100, 500, { angle: 30, opacity: 0.15 });
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(12);
  y += 40;

  // --- Company/Client Info ---
  doc.setFont('helvetica', 'normal');
  doc.text('From:', margin, y);
  doc.setFont('helvetica', 'bold');
  doc.text(data.contractor.name, margin + 40, y);
  doc.setFont('helvetica', 'normal');
  doc.text(data.contractor.address, margin + 40, y + 14);
  doc.text(data.contractor.email, margin + 40, y + 28);
  if (data.contractor.phone) doc.text(data.contractor.phone, margin + 40, y + 42);

  doc.setFont('helvetica', 'normal');
  doc.text('Bill To:', 320, y);
  doc.setFont('helvetica', 'bold');
  doc.text(data.client.name, 360, y);
  doc.setFont('helvetica', 'normal');
  doc.text(data.client.address, 360, y + 14);

  y += 60;

  // --- Invoice Details ---
  doc.setFont('helvetica', 'bold');
  doc.text(`Invoice #${data.invoiceNumber}`, margin, y);
  doc.setFont('helvetica', 'normal');
  doc.text(`Issue Date: ${data.issueDate.toLocaleDateString()}`, margin, y + 16);
  doc.text(`Due Date: ${data.dueDate.toLocaleDateString()}`, margin, y + 32);
  doc.text(`Period: ${data.period.startDate.toLocaleDateString()} - ${data.period.endDate.toLocaleDateString()}`, margin, y + 48);

  y += 64;

  // --- Timesheet Table Header ---
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(13);
  doc.text('Date', margin, y);
  doc.text('Description', margin + 70, y);
  doc.text('Reg Hrs', margin + 250, y);
  doc.text('OT Hrs', margin + 310, y);
  doc.text('Travel', margin + 370, y);
  doc.text('Amount', margin + 440, y);
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(11);
  y += 14;
  doc.setLineWidth(0.5);
  doc.line(margin, y, 540, y);
  y += 8;

  // --- Timesheet Entries ---
  data.entries.forEach((entry) => {
    if (y > 700) {
      doc.addPage();
      y = margin;
    }
    doc.text(entry.date.toLocaleDateString(), margin, y);
    doc.text(entry.description, margin + 70, y, { maxWidth: 160 });
    doc.text(entry.regularHours.toString(), margin + 250, y, { align: 'right' });
    doc.text(entry.overtimeHours.toString(), margin + 310, y, { align: 'right' });
    doc.text(entry.travelHours.toString(), margin + 370, y, { align: 'right' });
    doc.text(`$${entry.amount.toFixed(2)}`, margin + 440, y, { align: 'right' });
    y += 16;
    if (entry.expenses && entry.expenses > 0) {
      doc.setFontSize(10);
      doc.setTextColor(100, 100, 100);
      doc.text(`Expenses: $${entry.expenses.toFixed(2)}`, margin + 70, y);
      doc.setFontSize(11);
      doc.setTextColor(0, 0, 0);
      y += 12;
    }
  });

  y += 10;
  doc.line(margin, y, 540, y);
  y += 16;

  // --- Summary Section ---
  doc.setFont('helvetica', 'bold');
  doc.text('Summary', margin, y);
  doc.setFont('helvetica', 'normal');
  y += 16;
  doc.text(`Regular Hours: ${data.summary.regularHours} ($${data.summary.regularAmount.toFixed(2)})`, margin, y);
  y += 14;
  doc.text(`Overtime Hours: ${data.summary.overtimeHours} ($${data.summary.overtimeAmount.toFixed(2)})`, margin, y);
  y += 14;
  doc.text(`Travel Hours: ${data.summary.travelHours} ($${data.summary.travelAmount.toFixed(2)})`, margin, y);
  y += 14;
  doc.text(`Expenses: $${data.summary.expensesTotal.toFixed(2)}`, margin, y);
  y += 18;
  doc.setFont('helvetica', 'bold');
  doc.text(`Subtotal: $${data.summary.subtotal.toFixed(2)}`, margin, y);
  y += 16;
  doc.setFont('helvetica', 'normal');
  doc.text(`GST: $${data.summary.gst.toFixed(2)}`, margin, y);
  y += 14;
  doc.text(`PST: $${data.summary.pst.toFixed(2)}`, margin, y);
  y += 18;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(15);
  doc.setTextColor(34, 65, 170);
  doc.text(`TOTAL: $${data.summary.total.toFixed(2)}`, margin, y);
  doc.setFontSize(11);
  doc.setTextColor(0, 0, 0);
  y += 24;

  // --- Payment Terms & Notes ---
  doc.setFont('helvetica', 'bold');
  doc.text('Payment Terms:', margin, y);
  doc.setFont('helvetica', 'normal');
  doc.text('Net 30 days. Please make payment to the contractor listed above.', margin + 100, y);
  y += 16;
  if (data.notes) {
    doc.setFont('helvetica', 'bold');
    doc.text('Notes:', margin, y);
    doc.setFont('helvetica', 'normal');
    doc.text(data.notes, margin + 50, y, { maxWidth: 400 });
    y += 16;
  }

  // --- Output ---
  const pdfBlob: Blob = doc.output('blob');
  const pdfBase64: string = doc.output('datauristring').split(',')[1];
  return { pdfBlob, pdfBase64 };
}

// --- File Download ---
export function downloadPDF(pdfBlob: Blob, filename: string): void {
  const url = window.URL.createObjectURL(pdfBlob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  window.URL.revokeObjectURL(url);
  document.body.removeChild(a);
} 