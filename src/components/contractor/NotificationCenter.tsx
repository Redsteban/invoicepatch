'use client';

import { motion, AnimatePresence } from 'framer-motion';
import { useState, useEffect } from 'react';
import {
  BellIcon,
  XMarkIcon,
  ClockIcon,
  ExclamationTriangleIcon,
  InformationCircleIcon,
  CheckCircleIcon,
  SparklesIcon,
  CalendarDaysIcon,
  DocumentTextIcon,
  CurrencyDollarIcon
} from '@heroicons/react/24/outline';
import { 
  stackPayrollCalendar, 
  formatDate, 
  getDaysUntil, 
  isOverdue,
  PayrollPeriod 
} from '../../lib/payroll-calendar';
import { 
  autoInvoiceGenerator, 
  AutoGeneratedInvoice
} from '../../lib/auto-invoice-generator';

interface Notification {
  id: string;
  type: 'invoice_created' | 'reminder_tuesday' | 'urgent_thursday' | 'final_friday' | 'payroll_deadline' | 'auto_generation';
  title: string;
  message: string;
  urgency: 'info' | 'low' | 'medium' | 'high' | 'critical';
  timestamp: Date;
  read: boolean;
  actionUrl?: string;
  actionText?: string;
  invoiceId?: string;
  periodId?: string;
  dismissible: boolean;
}

const NotificationCenter = () => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [isOpen, setIsOpen] = useState(false);
  const [filter, setFilter] = useState<'all' | 'unread' | 'urgent'>('all');

  // Sample notifications based on Stack payroll calendar
  const sampleNotifications: Notification[] = [
    {
      id: 'notif-001',
      type: 'invoice_created',
      title: 'Invoice Auto-Generated',
      message: 'Your invoice for Dec 23, 2024 - Jan 2, 2025 has been auto-generated and is ready for review. Deadline: January 2nd.',
      urgency: 'info',
      timestamp: new Date('2025-01-04T08:00:00'),
      read: false,
      actionUrl: '/contractor/invoices/auto-1704531600000-contractor-001',
      actionText: 'Review Invoice',
      invoiceId: 'auto-1704531600000-contractor-001',
      periodId: 'stack-2025-01-01',
      dismissible: true
    },
    {
      id: 'notif-002',
      type: 'reminder_tuesday',
      title: 'Invoice Reminder',
      message: 'Reminder: Your invoice for Dec 23, 2024 - Jan 2, 2025 is 85% complete. 1 day remaining until deadline.',
      urgency: 'medium',
      timestamp: new Date('2025-01-07T09:00:00'),
      read: false,
      actionUrl: '/contractor/invoices/auto-1704531600000-contractor-001',
      actionText: 'Complete Invoice',
      invoiceId: 'auto-1704531600000-contractor-001',
      periodId: 'stack-2025-01-01',
      dismissible: true
    },
    {
      id: 'notif-003',
      type: 'urgent_thursday',
      title: 'URGENT: Invoice Due Tomorrow',
      message: 'URGENT: Your invoice for Jan 3 - Jan 16, 2025 is due tomorrow. Current completion: 15%. Missing: Time entries, days worked, mileage.',
      urgency: 'high',
      timestamp: new Date('2025-01-15T10:00:00'),
      read: true,
      actionUrl: '/contractor/invoices/auto-1705140000000-contractor-001',
      actionText: 'Complete Now',
      invoiceId: 'auto-1705140000000-contractor-001',
      periodId: 'stack-2025-01-02',
      dismissible: true
    },
    {
      id: 'notif-004',
      type: 'final_friday',
      title: 'FINAL NOTICE: Invoice Due Today',
      message: 'FINAL NOTICE: Your invoice for Jan 3 - Jan 16, 2025 is due TODAY. Submit now to ensure payment on January 17th.',
      urgency: 'critical',
      timestamp: new Date('2025-01-16T08:00:00'),
      read: false,
      actionUrl: '/contractor/invoices/auto-1705140000000-contractor-001',
      actionText: 'Submit Invoice',
      invoiceId: 'auto-1705140000000-contractor-001',
      periodId: 'stack-2025-01-02',
      dismissible: false
    },
    {
      id: 'notif-005',
      type: 'auto_generation',
      title: 'Next Invoice Auto-Generation',
      message: 'Your next invoice will be automatically generated on Saturday, February 1st for the work period Jan 17 - Jan 30, 2025.',
      urgency: 'info',
      timestamp: new Date('2025-01-30T12:00:00'),
      read: false,
      actionUrl: '/contractor/calendar',
      actionText: 'View Calendar',
      periodId: 'stack-2025-01-03',
      dismissible: true
    },
    {
      id: 'notif-006',
      type: 'payroll_deadline',
      title: 'Upcoming Payroll Deadline',
      message: 'Stack payroll cut-off is in 3 days (January 30th). Ensure all invoices are submitted to receive payment on January 31st.',
      urgency: 'medium',
      timestamp: new Date('2025-01-27T09:00:00'),
      read: true,
      actionUrl: '/contractor/invoices',
      actionText: 'Check Invoices',
      periodId: 'stack-2025-01-03',
      dismissible: true
    }
  ];

  useEffect(() => {
    setNotifications(sampleNotifications);
  }, []);

  const getNotificationIcon = (type: string, urgency: string) => {
    switch (type) {
      case 'invoice_created':
        return <SparklesIcon className="h-5 w-5" />;
      case 'auto_generation':
        return <CalendarDaysIcon className="h-5 w-5" />;
      case 'payroll_deadline':
        return <CurrencyDollarIcon className="h-5 w-5" />;
      default:
        if (urgency === 'critical' || urgency === 'high') {
          return <ExclamationTriangleIcon className="h-5 w-5" />;
        } else if (urgency === 'medium') {
          return <ClockIcon className="h-5 w-5" />;
        } else {
          return <InformationCircleIcon className="h-5 w-5" />;
        }
    }
  };

  const getNotificationColor = (urgency: string) => {
    switch (urgency) {
      case 'critical':
        return 'bg-red-50 border-red-300 text-red-800';
      case 'high':
        return 'bg-orange-50 border-orange-300 text-orange-800';
      case 'medium':
        return 'bg-yellow-50 border-yellow-300 text-yellow-800';
      case 'low':
        return 'bg-blue-50 border-blue-300 text-blue-800';
      case 'info':
        return 'bg-emerald-50 border-emerald-300 text-emerald-800';
      default:
        return 'bg-gray-50 border-gray-300 text-gray-800';
    }
  };

  const getIconColor = (urgency: string) => {
    switch (urgency) {
      case 'critical':
        return 'text-red-600';
      case 'high':
        return 'text-orange-600';
      case 'medium':
        return 'text-yellow-600';
      case 'low':
        return 'text-blue-600';
      case 'info':
        return 'text-emerald-600';
      default:
        return 'text-gray-600';
    }
  };

  const markAsRead = (notificationId: string) => {
    setNotifications(prev => 
      prev.map(notif => 
        notif.id === notificationId ? { ...notif, read: true } : notif
      )
    );
  };

  const dismissNotification = (notificationId: string) => {
    setNotifications(prev => 
      prev.filter(notif => notif.id !== notificationId)
    );
  };

  const markAllAsRead = () => {
    setNotifications(prev => 
      prev.map(notif => ({ ...notif, read: true }))
    );
  };

  const filteredNotifications = notifications.filter(notif => {
    switch (filter) {
      case 'unread':
        return !notif.read;
      case 'urgent':
        return notif.urgency === 'critical' || notif.urgency === 'high';
      default:
        return true;
    }
  });

  const unreadCount = notifications.filter(notif => !notif.read).length;
  const urgentCount = notifications.filter(notif => 
    (notif.urgency === 'critical' || notif.urgency === 'high') && !notif.read
  ).length;

  return (
    <div className="relative">
      {/* Notification Bell */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="relative p-2 text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-lg"
      >
        <BellIcon className="h-6 w-6" />
        {unreadCount > 0 && (
          <span className="absolute -top-1 -right-1 h-5 w-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
            {unreadCount > 9 ? '9+' : unreadCount}
          </span>
        )}
      </button>

      {/* Notification Panel */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95, y: -10 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.95, y: -10 }}
            className="absolute right-0 mt-2 w-96 bg-white rounded-lg shadow-lg border border-gray-200 z-50"
          >
            {/* Header */}
            <div className="p-4 border-b border-gray-200">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-lg font-semibold text-gray-900">Notifications</h3>
                <button
                  onClick={() => setIsOpen(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XMarkIcon className="h-5 w-5" />
                </button>
              </div>

              {/* Filter Tabs */}
              <div className="flex gap-2">
                <button
                  onClick={() => setFilter('all')}
                  className={`px-3 py-1 text-sm rounded ${
                    filter === 'all'
                      ? 'bg-blue-100 text-blue-700'
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  All ({notifications.length})
                </button>
                <button
                  onClick={() => setFilter('unread')}
                  className={`px-3 py-1 text-sm rounded ${
                    filter === 'unread'
                      ? 'bg-blue-100 text-blue-700'
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  Unread ({unreadCount})
                </button>
                <button
                  onClick={() => setFilter('urgent')}
                  className={`px-3 py-1 text-sm rounded ${
                    filter === 'urgent'
                      ? 'bg-blue-100 text-blue-700'
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  Urgent ({urgentCount})
                </button>
              </div>

              {/* Mark All Read */}
              {unreadCount > 0 && (
                <button
                  onClick={markAllAsRead}
                  className="mt-2 text-sm text-blue-600 hover:text-blue-800"
                >
                  Mark all as read
                </button>
              )}
            </div>

            {/* Notifications List */}
            <div className="max-h-96 overflow-y-auto">
              {filteredNotifications.length === 0 ? (
                <div className="p-6 text-center text-gray-500">
                  <BellIcon className="h-12 w-12 mx-auto mb-2 text-gray-300" />
                  <p>No notifications found</p>
                </div>
              ) : (
                <div className="space-y-1">
                  {filteredNotifications.map((notification, index) => (
                    <motion.div
                      key={notification.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.05 }}
                      className={`p-4 border-l-4 hover:bg-gray-50 cursor-pointer transition-colors ${
                        notification.read ? 'opacity-75' : ''
                      } ${getNotificationColor(notification.urgency)}`}
                      onClick={() => markAsRead(notification.id)}
                    >
                      <div className="flex items-start gap-3">
                        <div className={`flex-shrink-0 ${getIconColor(notification.urgency)}`}>
                          {getNotificationIcon(notification.type, notification.urgency)}
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <div className="flex items-start justify-between">
                            <h4 className={`font-medium ${
                              notification.urgency === 'critical' ? 'text-red-900' :
                              notification.urgency === 'high' ? 'text-orange-900' :
                              notification.urgency === 'medium' ? 'text-yellow-900' :
                              notification.urgency === 'low' ? 'text-blue-900' :
                              'text-emerald-900'
                            }`}>
                              {notification.title}
                            </h4>
                            {notification.dismissible && (
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  dismissNotification(notification.id);
                                }}
                                className="text-gray-400 hover:text-gray-600 ml-2"
                              >
                                <XMarkIcon className="h-4 w-4" />
                              </button>
                            )}
                          </div>
                          
                          <p className={`text-sm mt-1 ${
                            notification.urgency === 'critical' ? 'text-red-800' :
                            notification.urgency === 'high' ? 'text-orange-800' :
                            notification.urgency === 'medium' ? 'text-yellow-800' :
                            notification.urgency === 'low' ? 'text-blue-800' :
                            'text-emerald-800'
                          }`}>
                            {notification.message}
                          </p>
                          
                          <div className="flex items-center justify-between mt-3">
                            <span className="text-xs text-gray-500">
                              {notification.timestamp.toLocaleString('en-CA', {
                                month: 'short',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit'
                              })}
                            </span>
                            
                            {notification.actionText && (
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  // Handle navigation to actionUrl
                                  console.log('Navigate to:', notification.actionUrl);
                                }}
                                className={`text-xs font-medium px-2 py-1 rounded hover:underline ${
                                  notification.urgency === 'critical' ? 'text-red-700 hover:text-red-900' :
                                  notification.urgency === 'high' ? 'text-orange-700 hover:text-orange-900' :
                                  notification.urgency === 'medium' ? 'text-yellow-700 hover:text-yellow-900' :
                                  notification.urgency === 'low' ? 'text-blue-700 hover:text-blue-900' :
                                  'text-emerald-700 hover:text-emerald-900'
                                }`}
                              >
                                {notification.actionText}
                              </button>
                            )}
                          </div>
                          
                          {!notification.read && (
                            <div className="mt-2">
                              <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                            </div>
                          )}
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              )}
            </div>

            {/* Footer */}
            <div className="p-4 border-t border-gray-200 bg-gray-50">
              <div className="text-center">
                <button
                  onClick={() => {
                    setIsOpen(false);
                    // Navigate to full notifications page
                    console.log('Navigate to full notifications');
                  }}
                  className="text-sm text-blue-600 hover:text-blue-800 font-medium"
                >
                  View All Notifications
                </button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Overlay */}
      {isOpen && (
        <div
          className="fixed inset-0 z-40"
          onClick={() => setIsOpen(false)}
        />
      )}
    </div>
  );
};

export default NotificationCenter; 