'use client';

import { motion } from 'framer-motion';
import { useState, useEffect } from 'react';
import {
  CalendarDaysIcon,
  BellIcon,
  ClockIcon,
  CheckCircleIcon,
  ExclamationTriangleIcon,
  DocumentTextIcon,
  CurrencyDollarIcon,
  ArrowRightIcon,
  EyeIcon,
  PencilIcon,
  PaperAirplaneIcon,
  ChartBarIcon,
  SparklesIcon
} from '@heroicons/react/24/outline';
import { 
  stackPayrollCalendar, 
  formatDate, 
  formatDateShort, 
  getDaysUntil, 
  isOverdue,
  PayrollPeriod 
} from '../../lib/payroll-calendar';
import { 
  autoInvoiceGenerator, 
  AutoGeneratedInvoice, 
  checkForInvoiceGenerationToday,
  getUpcomingInvoiceDeadlines 
} from '../../lib/auto-invoice-generator';

interface DashboardStats {
  currentPeriod: PayrollPeriod | null;
  nextPeriod: PayrollPeriod | null;
  upcomingDeadlines: PayrollPeriod[];
  autoInvoicesGenerated: number;
  totalInvoiceValue: number;
  completionRate: number;
}

const AutoInvoiceDashboard = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());
  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());
  const [dashboardStats, setDashboardStats] = useState<DashboardStats | null>(null);
  const [autoInvoices, setAutoInvoices] = useState<AutoGeneratedInvoice[]>([]);
  const [isGenerationDay, setIsGenerationDay] = useState(false);

  // Sample auto-generated invoices for demo
  const sampleAutoInvoices: AutoGeneratedInvoice[] = [
    {
      id: 'auto-1704531600000-contractor-001',
      invoiceNumber: 'INV-250101-MTS',
      contractorId: 'contractor-001',
      periodId: 'stack-2025-01-01',
      client: 'Stack Production Testing Inc.',
      project: 'Montney Horizontal Drilling',
      afeCode: 'STACK-2025-012025',
      workPeriod: 'Dec 23, 2024 - Jan 2, 2025',
      workPeriodStart: new Date('2024-12-23'),
      workPeriodEnd: new Date('2025-01-02'),
      status: 'in_progress',
      
      dayRate: 850,
      daysWorked: 8,
      regularHours: 64,
      overtimeHours: 4,
      overtimeRate: 159.38,
      
      truckRate: 150,
      truckDays: 6,
      mileage: 450,
      mileageRate: 0.68,
      
      expenses: [
        { category: 'Accommodation', amount: 420, description: 'Hotel stays', receiptRequired: true, receiptUploaded: true },
        { category: 'Meals', amount: 180, description: 'Per diem', receiptRequired: true, receiptUploaded: false },
        { category: 'Fuel', amount: 0, description: '', receiptRequired: true, receiptUploaded: false }
      ],
      
      laborSubtotal: 7437.52,
      truckSubtotal: 900,
      mileageSubtotal: 306,
      expenseSubtotal: 600,
      subtotal: 9243.52,
      gst: 462.18,
      total: 9705.70,
      
      createdDate: new Date('2025-01-04'),
      dueDate: new Date('2025-01-03'),
      submissionDeadline: new Date('2025-01-02'),
      
      completionPercentage: 85,
      missingItems: ['1 expense receipt pending'],
      readyToSubmit: false,
      
      autoGenerated: true,
      generationSource: 'payroll_calendar',
      notes: 'Auto-generated for Stack payroll period Dec 23, 2024 - Jan 2, 2025. Please review and complete all required fields.'
    },
    {
      id: 'auto-1705140000000-contractor-001',
      invoiceNumber: 'INV-250102-MTS',
      contractorId: 'contractor-001',
      periodId: 'stack-2025-01-02',
      client: 'Stack Production Testing Inc.',
      project: 'Production Testing Services',
      afeCode: 'STACK-2025-012025',
      workPeriod: 'Jan 3 - Jan 16, 2025',
      workPeriodStart: new Date('2025-01-03'),
      workPeriodEnd: new Date('2025-01-16'),
      status: 'auto_generated',
      
      dayRate: 850,
      daysWorked: 0,
      regularHours: 0,
      overtimeHours: 0,
      overtimeRate: 159.38,
      
      truckRate: 150,
      truckDays: 0,
      mileage: 0,
      mileageRate: 0.68,
      
      expenses: [
        { category: 'Accommodation', amount: 0, description: '', receiptRequired: true, receiptUploaded: false },
        { category: 'Meals', amount: 0, description: '', receiptRequired: true, receiptUploaded: false }
      ],
      
      laborSubtotal: 0,
      truckSubtotal: 0,
      mileageSubtotal: 0,
      expenseSubtotal: 0,
      subtotal: 0,
      gst: 0,
      total: 0,
      
      createdDate: new Date('2025-01-18'),
      dueDate: new Date('2025-01-17'),
      submissionDeadline: new Date('2025-01-16'),
      
      completionPercentage: 15,
      missingItems: ['Time entries required', 'Days worked not specified', 'Mileage needs to be entered'],
      readyToSubmit: false,
      
      autoGenerated: true,
      generationSource: 'payroll_calendar',
      notes: 'Auto-generated for Stack payroll period Jan 3 - Jan 16, 2025. Please review and complete all required fields.'
    }
  ];

  useEffect(() => {
    // Initialize dashboard data
    const currentPeriod = stackPayrollCalendar.getCurrentPeriod();
    const nextPeriod = stackPayrollCalendar.getNextPeriod();
    const upcomingDeadlines = getUpcomingInvoiceDeadlines();
    const isGenDay = checkForInvoiceGenerationToday();
    
    setDashboardStats({
      currentPeriod,
      nextPeriod,
      upcomingDeadlines,
      autoInvoicesGenerated: sampleAutoInvoices.length,
      totalInvoiceValue: sampleAutoInvoices.reduce((sum, inv) => sum + inv.total, 0),
      completionRate: Math.round(sampleAutoInvoices.reduce((sum, inv) => sum + inv.completionPercentage, 0) / sampleAutoInvoices.length)
    });
    
    setAutoInvoices(sampleAutoInvoices);
    setIsGenerationDay(isGenDay);
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'auto_generated':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'in_progress':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'submitted':
        return 'bg-emerald-100 text-emerald-800 border-emerald-200';
      case 'approved':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'paid':
        return 'bg-green-100 text-green-800 border-green-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'auto_generated':
        return <SparklesIcon className="h-4 w-4" />;
      case 'in_progress':
        return <ClockIcon className="h-4 w-4" />;
      case 'submitted':
        return <PaperAirplaneIcon className="h-4 w-4" />;
      case 'approved':
        return <CheckCircleIcon className="h-4 w-4" />;
      case 'paid':
        return <CheckCircleIcon className="h-4 w-4" />;
      default:
        return <DocumentTextIcon className="h-4 w-4" />;
    }
  };

  const getUrgencyColor = (deadline: Date) => {
    const daysUntil = getDaysUntil(deadline);
    if (isOverdue(deadline)) return 'bg-red-100 border-red-300 text-red-800';
    if (daysUntil <= 1) return 'bg-orange-100 border-orange-300 text-orange-800';
    if (daysUntil <= 3) return 'bg-yellow-100 border-yellow-300 text-yellow-800';
    return 'bg-green-100 border-green-300 text-green-800';
  };

  const calendarDays = stackPayrollCalendar.getPeriodsForMonth(selectedYear, selectedMonth + 1);

  return (
    <div className="space-y-6">
      {/* Header with Auto-Generation Status */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
            <SparklesIcon className="h-6 w-6 text-blue-600" />
            Stack Payroll Calendar
          </h2>
          <p className="text-gray-600">Automated invoice generation system for Stack Production Testing</p>
        </div>
        
        {isGenerationDay && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="flex items-center gap-2 bg-blue-50 border border-blue-200 rounded-lg px-4 py-2"
          >
            <SparklesIcon className="h-5 w-5 text-blue-600" />
            <span className="font-medium text-blue-900">Invoice Generation Day!</span>
          </motion.div>
        )}
      </div>

      {/* Dashboard Stats */}
      {dashboardStats && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Current Period</p>
                <p className="text-lg font-bold text-blue-600">
                  {dashboardStats.currentPeriod ? 
                    formatDateShort(dashboardStats.currentPeriod.workPeriodEnd) : 
                    'Not Active'
                  }
                </p>
              </div>
              <CalendarDaysIcon className="h-8 w-8 text-blue-600" />
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Auto Invoices</p>
                <p className="text-lg font-bold text-emerald-600">{dashboardStats.autoInvoicesGenerated}</p>
              </div>
              <SparklesIcon className="h-8 w-8 text-emerald-600" />
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Value</p>
                <p className="text-lg font-bold text-green-600">
                  ${dashboardStats.totalInvoiceValue.toLocaleString('en-CA', { minimumFractionDigits: 2 })}
                </p>
              </div>
              <CurrencyDollarIcon className="h-8 w-8 text-green-600" />
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Completion Rate</p>
                <p className="text-lg font-bold text-purple-600">{dashboardStats.completionRate}%</p>
              </div>
              <ChartBarIcon className="h-8 w-8 text-purple-600" />
            </div>
          </div>
        </div>
      )}

      {/* Upcoming Deadlines Alert */}
      {dashboardStats && dashboardStats.upcomingDeadlines.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-orange-50 border border-orange-200 rounded-lg p-4"
        >
          <div className="flex items-start gap-3">
            <ExclamationTriangleIcon className="h-5 w-5 text-orange-600 mt-0.5" />
            <div className="flex-1">
              <h3 className="font-semibold text-orange-900">Upcoming Invoice Deadlines</h3>
              <div className="mt-2 space-y-2">
                {dashboardStats.upcomingDeadlines.map((period, index) => (
                  <div key={period.id} className="flex items-center justify-between">
                    <span className="text-orange-800">
                      {stackPayrollCalendar.formatPeriod(period)}
                    </span>
                    <span className={`px-2 py-1 rounded text-xs font-medium ${getUrgencyColor(period.cutOffDate)}`}>
                      {isOverdue(period.cutOffDate) ? 'OVERDUE' : `${getDaysUntil(period.cutOffDate)} days`}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </motion.div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Payroll Calendar */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900">2025 Payroll Calendar</h3>
            <div className="flex gap-2">
              <select
                value={selectedMonth}
                onChange={(e) => setSelectedMonth(parseInt(e.target.value))}
                className="text-sm border border-gray-300 rounded px-2 py-1"
              >
                {Array.from({ length: 12 }, (_, i) => (
                  <option key={i} value={i}>
                    {new Date(2025, i).toLocaleDateString('en-CA', { month: 'long' })}
                  </option>
                ))}
              </select>
              <select
                value={selectedYear}
                onChange={(e) => setSelectedYear(parseInt(e.target.value))}
                className="text-sm border border-gray-300 rounded px-2 py-1"
              >
                <option value={2025}>2025</option>
                <option value={2024}>2024</option>
              </select>
            </div>
          </div>

          <div className="space-y-3">
            {calendarDays.map((period, index) => (
              <motion.div
                key={period.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.1 }}
                className="border rounded-lg p-3 hover:shadow-md transition-all"
              >
                <div className="flex items-center justify-between mb-2">
                  <h4 className="font-semibold text-gray-900">
                    Pay Date: {formatDateShort(period.payDate)}
                  </h4>
                  <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                    Period {period.id.split('-').pop()}
                  </span>
                </div>
                
                <div className="grid grid-cols-2 gap-2 text-sm text-gray-600">
                  <div>
                    <strong>Work Period:</strong><br />
                    {stackPayrollCalendar.formatPeriod(period)}
                  </div>
                  <div>
                    <strong>Cut-off:</strong> {formatDateShort(period.cutOffDate)}<br />
                    <strong>Auto-Gen:</strong> {formatDateShort(period.invoiceGenerationDate)}
                  </div>
                </div>
                
                <div className="mt-2 flex items-center justify-between">
                  <span className="text-xs text-gray-500">
                    Work Days: {stackPayrollCalendar.calculateWorkDays(period)}
                  </span>
                  <div className="flex gap-1">
                    {getDaysUntil(period.cutOffDate) <= 7 && getDaysUntil(period.cutOffDate) > 0 && (
                      <span className="bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded">
                        Due in {getDaysUntil(period.cutOffDate)} days
                      </span>
                    )}
                    {isOverdue(period.cutOffDate) && (
                      <span className="bg-red-100 text-red-800 text-xs px-2 py-1 rounded">
                        Overdue
                      </span>
                    )}
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </div>

        {/* Auto-Generated Invoices */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
              <SparklesIcon className="h-5 w-5 text-blue-600" />
              Auto-Generated Invoices
            </h3>
            <span className="text-sm bg-blue-100 text-blue-800 px-2 py-1 rounded">
              {autoInvoices.length} invoices
            </span>
          </div>

          <div className="space-y-3">
            {autoInvoices.map((invoice, index) => (
              <motion.div
                key={invoice.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className="border rounded-lg p-4 hover:shadow-md transition-all"
              >
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    {getStatusIcon(invoice.status)}
                    <h4 className="font-semibold text-gray-900">{invoice.invoiceNumber}</h4>
                    <span className={`px-2 py-1 text-xs rounded border ${getStatusColor(invoice.status)}`}>
                      {invoice.status.replace('_', ' ')}
                    </span>
                  </div>
                  <div className="text-right">
                    <div className="font-bold text-gray-900">
                      ${invoice.total.toLocaleString('en-CA', { minimumFractionDigits: 2 })}
                    </div>
                  </div>
                </div>

                <div className="text-sm text-gray-600 mb-3">
                  <div><strong>Period:</strong> {invoice.workPeriod}</div>
                  <div><strong>Project:</strong> {invoice.project}</div>
                  <div><strong>Due:</strong> {formatDate(invoice.submissionDeadline)}</div>
                </div>

                {/* Completion Progress */}
                <div className="mb-3">
                  <div className="flex items-center justify-between text-sm mb-1">
                    <span className="text-gray-600">Completion</span>
                    <span className="font-medium">{invoice.completionPercentage}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className={`h-2 rounded-full transition-all duration-300 ${
                        invoice.completionPercentage >= 80 ? 'bg-green-500' :
                        invoice.completionPercentage >= 50 ? 'bg-yellow-500' : 'bg-red-500'
                      }`}
                      style={{ width: `${invoice.completionPercentage}%` }}
                    />
                  </div>
                </div>

                {/* Missing Items */}
                {invoice.missingItems.length > 0 && (
                  <div className="bg-orange-50 border border-orange-200 rounded p-2 mb-3">
                    <div className="text-xs font-medium text-orange-900 mb-1">Missing Items:</div>
                    <ul className="text-xs text-orange-800 space-y-1">
                      {invoice.missingItems.map((item, idx) => (
                        <li key={idx} className="flex items-center gap-1">
                          <ExclamationTriangleIcon className="h-3 w-3" />
                          {item}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* Actions */}
                <div className="flex gap-2">
                  <button className="flex-1 bg-blue-600 text-white py-2 px-3 rounded text-sm hover:bg-blue-700 transition-colors flex items-center justify-center gap-1">
                    <PencilIcon className="h-4 w-4" />
                    Edit Invoice
                  </button>
                  <button className="bg-gray-600 text-white py-2 px-3 rounded text-sm hover:bg-gray-700 transition-colors">
                    <EyeIcon className="h-4 w-4" />
                  </button>
                  {invoice.readyToSubmit && (
                    <button className="bg-green-600 text-white py-2 px-3 rounded text-sm hover:bg-green-700 transition-colors">
                      <PaperAirplaneIcon className="h-4 w-4" />
                    </button>
                  )}
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </div>

      {/* Benefits Section */}
      <div className="bg-gradient-to-r from-blue-50 to-emerald-50 border border-blue-200 rounded-lg p-6">
        <div className="flex items-center gap-3 mb-4">
          <SparklesIcon className="h-6 w-6 text-blue-600" />
          <h3 className="text-xl font-semibold text-gray-900">Automated Invoice Benefits</h3>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
          <div>
            <div className="font-semibold text-blue-600 mb-2">Never Miss a Deadline:</div>
            <ul className="text-gray-600 space-y-1">
              <li>• Auto-creation every Saturday after cut-off</li>
              <li>• Smart notification reminders</li>
              <li>• Deadline countdown tracking</li>
              <li>• Perfect Stack payroll alignment</li>
            </ul>
          </div>
          <div>
            <div className="font-semibold text-emerald-600 mb-2">Streamlined Process:</div>
            <ul className="text-gray-600 space-y-1">
              <li>• Pre-populated with standard rates</li>
              <li>• Smart work period calculation</li>
              <li>• Automatic AFE code generation</li>
              <li>• Real-time completion tracking</li>
            </ul>
          </div>
          <div>
            <div className="font-semibold text-purple-600 mb-2">Quality Assurance:</div>
            <ul className="text-gray-600 space-y-1">
              <li>• Missing item detection</li>
              <li>• Receipt requirement tracking</li>
              <li>• Automatic tax calculations</li>
              <li>• Ready-to-submit validation</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AutoInvoiceDashboard; 